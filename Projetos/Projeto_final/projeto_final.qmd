---
title: "Predição de Vítimas em Acidentes de Trânsito"
format:
  revealjs:
    incremental: true
    embed-resources: true
---

## Introdução ao problema

Implementar atendimento priorizado para acidentes com maior propensão a existência de vítimas fatais.

## Objetivos

Criar modelo preditivo para classificação de acidentes e subsidiar direcionamento de esforços para atendimento.

```{r, warning = F}
library(tidyverse)
library(yardstick)
library(skimr)
library(scales)
library(gridExtra)
library(DT)

rodar_modelo_fw <- 1
```

## Base de Dados

Registro de acidentes no município de Porto Alegre, tipificados de acordo com existência ou não de pessoas feridas e vítimas fatais decorrentes do acidente de trânsito.

Fonte: [Dados abertos - POA](https://dadosabertos.poa.br/dataset/acidentes-de-transito-acidentes)

Última Atualização: 01/11/2023

```{r}

acidentes <- read_csv2('bases/cat_acidentes.csv', show_col_types = F)

# acidentes$cont_vit |> table()
# 
# acidentes$morte_post |> table()
# 
# acidentes$mortes |> table() |> sum()
# 
# acidentes$fatais |> table() |> sum()
```

## Campos 1

| Campo      | Descrição                                                                         |
|--------------------|----------------------------------------------------|
| mortes     | Contagem de vítimas fatais no momento do acidente.                                |
| morte_post | Contagem de vítimas fatais posteriores (30 dias após) e relacionadas ao acidente. |
| fatais     | Somatório das vítimas fatais (no momento e posteriores)                           |

## Campos 2

|       |   |           |            |
|------------|------------|-----------|------------|
| longitude  | latitude   | hora      | dia_sem    |
| auto       | taxi       | lotacao   | onibus_urb |
| onibus_met | onibus_int | caminhao  | moto       |
| carroca    | bicicleta  | noite_dia | regiao     |
| tipo_acid  | queda_arr  |           |            |

## Criação da Variável Alvo

Se campo fatais \> 0, então target = 1, senão target = 0.

```{r}
acidentes <- acidentes |> 
  mutate(target = if_else(fatais > 0, 1, 0),
         mes = as.factor(month(data)),
         hora_do_dia = hour(hora))

total.vitimas <- acidentes |> filter(target == 1) |> nrow()
total.acidentes <- acidentes |> nrow()

```

| Acidentes           | Vítimas Fatais    | Vítimas Fatais %                        |
|-------------------|------------------|-----------------------------------|
| `r total.acidentes` | `r total.vitimas` | `r total.vitimas/total.acidentes * 100` |
|                     |                   |                                         |
|                     |                   |                                         |

## Limpeza

Procura por valores faltantes.

```{r}
print('Dia da Semana')
acidentes$dia_sem|> is.na() |> table()

print('Noite x Dia')
acidentes$noite_dia|> is.na() |> table()

print('Região')
acidentes$regiao|> is.na() |> table()
```

## Limpeza 2

```{r}
print('Hora do Dia')
acidentes$hora_do_dia |> is.na() |> table()

print('Qtde Auto')
acidentes$auto |> is.na() |> table()

print('Qtde Caminhão')
acidentes$caminhao |> is.na() |> table()

print('Qtde Táxi')
acidentes$taxi |> is.na() |> table()
```

## Limpeza 3

```{r}
print('Qtde Lotação')
acidentes$lotacao |> is.na() |> table()

print('Qtde Moto')
acidentes$moto |> is.na() |> table()

print('Qtde Ônibus')
acidentes$onibus_urb |> is.na() |> table()
acidentes$onibus_met |> is.na() |> table()
acidentes$onibus_int |> is.na() |> table()

```

## Limpeza 4

```{r}
print('Qtde Bicicleta')
acidentes$bicicleta |> is.na() |> table()

print('Qtde Carroça')
acidentes$carroca |> is.na() |> table()

print('Outro veículo')
acidentes$outro |> is.na() |> table()
```

## Limpeza 5

```{r}
print('Longitude')
acidentes$longitude |> is.na() |> table()

print('Latitude')
acidentes$latitude |> is.na() |> table()

print('Queda em Arroio')
acidentes$queda_arr |> is.na() |> table()

```

```{r}
acidentes <- acidentes |> 
  filter(!is.na(regiao)) |> 
  filter(!is.na(hora))

```

## Criação de Variáveis

|                    |                   |
|--------------------|-------------------|
| Trimestre          | Presença auto     |
| Presença moto      | Presença Caminhão |
| Presença Táxi      | Presença Carroça  |
| Presença Bicicleta | Presença Ônibus   |
| Presença Lotação   |                   |

```{r}
acidentes <- acidentes |> 
  mutate(presenca_auto = if_else(auto > 0, 1, 0),
         presenca_moto = if_else(moto > 0, 1, 0),
         presenca_caminhao = if_else(caminhao > 0, 1, 0),
         presenca_taxi = if_else(taxi > 0, 1, 0),
         presenca_carroca = if_else(carroca > 0, 1, 0),
         presenca_bicicleta = if_else(bicicleta > 0, 1, 0),
         presenca_onibus = if_else(onibus_urb > 0 | 
                                   onibus_met > 0 |
                                   onibus_int >1, 1, 0),
         presenca_lotacao = if_else(lotacao > 0, 1, 0),
         trimestre = case_when(
           mes %in% c(1:3) ~ '1T',
           mes %in% c(4:6) ~ '2T',
           mes %in% c(7:9) ~ '3T',
           mes %in% c(10:12) ~ '4T',
         ),
         hora_grupo = case_when(
           hora_do_dia %in% c(0:3) ~ 'g_0-3',
           hora_do_dia %in% c(4:6) ~ 'g_4-6',
           hora_do_dia %in% c(7:9) ~ 'g_7-9',
           hora_do_dia %in% c(10:12) ~ 'g_10-12',
           hora_do_dia %in% c(13:15) ~ 'g_13-15',
           hora_do_dia %in% c(15:18) ~ 'g_16-18',
           hora_do_dia %in% c(19:21) ~ 'g_19-21',
           hora_do_dia %in% c(22:23) ~ 'g_22-23'))

```

## Análise Exploratória - Tipo Acidente

```{r}

p1 <- acidentes |>
  ggplot(aes(tipo_acid, fill = tipo_acid)) +
  geom_bar() + 
  labs(title = 'Acidentes', y = '', x = '') +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust= 0.5),
        legend.position = "none")  +
  scale_y_continuous(labels = label_number())


p2 <- acidentes |>
  filter(target == 1) |> 
  ggplot(aes(tipo_acid, fill = tipo_acid)) +
  geom_bar() + 
  labs(title = 'Vítimais Fatais', y = '', x = '') +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5),
        legend.position = "none")  +
  scale_y_continuous(labels = label_number())

grid.arrange(p1, p2, nrow = 1)

```

## Análise Exploratória - Região

```{r}
p1 <- acidentes |>
  ggplot(aes(regiao)) +
  geom_bar(aes(fill = regiao)) + 
  labs(title = 'Acidentes', y = '', x = '') +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.5),
        legend.position = "none")  +
  scale_y_continuous(labels = label_number())

p2 <- acidentes |>
  filter(target == 1) |> 
  ggplot(aes(regiao)) +
  geom_bar(aes(fill = regiao)) + 
  labs(title = 'Vítimais Fatais', y = '', x = '') +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.5),
        legend.position = "none")  +
  scale_y_continuous(labels = label_number())

grid.arrange(p1, p2, nrow = 1)
```

## Análise Exploratória - Noite x Dia

```{r}
p1 <- acidentes |> 
  ggplot(aes(noite_dia)) +
  geom_bar(aes(fill = noite_dia)) + 
  labs(title = 'Acidentes', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none")

p2 <- acidentes |>   
  filter(target == 1) |>
  ggplot(aes(noite_dia)) +
  geom_bar(aes(fill = noite_dia)) + 
  labs(title = 'Vítimais Fatais', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none")

grid.arrange(p1, p2, nrow = 1)
```

## Análise Exploratória - Trimestre

```{r}
p1 <- acidentes |> 
  ggplot(aes(trimestre)) +
  geom_bar(aes(fill = trimestre)) + 
  labs(title = 'Acidentes', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none")

p2 <- acidentes |> 
  filter(target == 1) |> 
  ggplot(aes(trimestre)) +
  geom_bar(aes(fill = trimestre)) + 
  labs(title = 'Vítimais Fatais', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none")

grid.arrange(p1, p2, nrow = 1)
```

## Análise Exploratória - Hora do Dia

```{r}
p1 <- acidentes |> 
  ggplot(aes(hora_do_dia)) +
  geom_bar(aes(fill = as_factor(hora_do_dia))) + 
  labs(title = 'Acidentes', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none") +
  scale_x_continuous(breaks = 0:23)

p2 <- acidentes |> 
  filter(target == 1) |> 
  ggplot(aes(hora_do_dia)) +
  geom_bar(aes(fill = as_factor(hora_do_dia))) + 
  labs(title = 'Vítimais Fatais', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none") +
  scale_x_continuous(breaks = 0:23)

grid.arrange(p1, p2, nrow = 1)
```

## Análise Exploratória - Hora (grupo)

```{r}

grupos_hora <- c(0, 3, 5, 10, 16, 22, 23)

acidentes <- acidentes |> 
  mutate(hora_grupo = cut(hora_do_dia, grupos_hora, include.lowest = T))

```

```{r}
p1 <- acidentes |> 
  ggplot(aes(hora_grupo)) +
  geom_bar(aes(fill = hora_grupo)) + 
  labs(title = 'Acidentes', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none")

p2 <- acidentes |> 
  filter(target == 1) |> 
  ggplot(aes(hora_grupo)) +
  geom_bar(aes(fill = hora_grupo)) + 
  labs(title = 'Vítimais Fatais', y = '', x = '') +
  theme_classic() + 
  theme(legend.position="none")

grid.arrange(p1, p2, nrow = 1)
```

## Análise Exploratória - Dia da Semana

```{r}
p1 <- acidentes |> 
  ggplot(aes(dia_sem)) +
  geom_bar(aes(fill = dia_sem)) + 
  labs(title = 'Acidentes', y = '', x = '') +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.5),
        legend.position = "none")

p2 <- acidentes |> 
  filter(target == 1) |> 
  ggplot(aes(dia_sem)) +
  geom_bar(aes(fill = dia_sem)) + 
  labs(title = 'Vítimais Fatais', y = '', x = '') +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.5),
        legend.position = "none")

grid.arrange(p1, p2, nrow = 1)
```

## Análise Exploratória

```{r}
p1 <- acidentes |> 
  filter(target == 1) |> 
  ggplot(aes(hora_do_dia)) +
  geom_bar(fill = 'cyan4') + 
  labs(title = 'Vítimais Fatais x Hora do dia x Tipo Acidente', y = '', x = '') +
  theme_classic() +
  facet_wrap(~tipo_acid)

p2 <- acidentes |> 
  filter(target == 1) |> 
  ggplot(aes(trimestre)) +
  geom_bar(fill = 'cyan4') + 
  labs(title = 'Vítimais Fatais x Trimestre x TipoAcidente', y = '', x = '') +
  theme_classic() +
  facet_wrap(~tipo_acid)

grid.arrange(p1, p2, nrow = 1)
```

## Modelo - Regressão Logística

$$p(x) = \frac{1}{1 + e^{-(\beta_0 + \beta_1x_1 + \beta_2x_2 + ... \beta _nx_n)}}$$

![](LogReg_1.png){fig-align="center"}

## Modelo Inicial

```{r}

modelo_inicial <- glm(target ~ 1, 
              family = "binomial", 
              data = acidentes)

modelo_inicial |> summary()
```

## Modelo Completo

```{r}
modelo_completo <- glm(target ~ dia_sem +
                noite_dia +
                regiao +
                # mes +
                presenca_auto +
                presenca_moto +
                presenca_caminhao +
                presenca_taxi +
                presenca_carroca +
                presenca_bicicleta +
                presenca_onibus +
                trimestre + 
                hora_grupo +
                # latitude + 
                # longitude +
                # queda_arr +
                tipo_acid, 
              family = "binomial", 
              data = acidentes)

modelo_completo |> summary()
```

## Modelo Final

```{r}

if(rodar_modelo_fw == 1){
  modelo_fw <- step(modelo_inicial,
                  scope = list(
                    lower = formula(modelo_inicial),
                    upper = formula(modelo_completo)
                  ),
                  direction = "forward",
                  trace = F)

  modelo <- modelo_fw
} else {
  modelo <- modelo_completo
}

modelo |> summary()
```

## Diferença Modelos

```{r}

coef_completo <- names(coef(modelo_completo))

coef_final <- names(coef(modelo))

coef_completo[!coef_completo %in% coef_final] |> 
  as.data.frame()

```

## Predição do Modelo

```{r}
acidentes <- acidentes |> 
  mutate(prob_predita = modelo$fitted.values)

acidentes$prob_predita |> summary()

acidentes |> 
  ggplot(aes(prob_predita)) + 
  geom_histogram(aes(fill = as_factor(target)), bins = 30) +
  scale_y_log10(labels = label_number()) +
  scale_x_continuous(labels = label_percent()) +
  theme_classic() +
  labs(y = 'Quantidade', x = 'Probabilidade Predita')
  
```

```{r}

corte <- acidentes |> filter(target == 1) |> nrow()
total <- acidentes |> nrow()

corte <- corte/total

```

```{r}
acidentes <- acidentes |> 
  mutate(predito = if_else(prob_predita > corte, 1, 0))

acidentes <- acidentes |> 
  mutate(target = as.factor(target),
         predito = as.factor(predito))
```

## Matriz de Confusão

Ponto de corte: `r round(corte, 4) *100` %.

```{r}
matriz <- table(acidentes$predito,
                          acidentes$target)

matriz2 <- table(acidentes$predito,
                          acidentes$target) |> 
  prop.table()

tn <- matriz[1,1]
tp <- matriz[2,2]
fp <- matriz[2,1]
fn <- matriz[1,2]

total.p <- tp + fn
total.n <- tn + fp

```

|             | Observado   |             |                       |
|-------------|-------------|-------------|-----------------------|
| **Predito** | 0           | 1           | Total                 |
| 0           | `r tn`      | `r fn`      | `r tn + fn`           |
| 1           | `r fp`      | `r tp`      | `r fp + tp`           |
| Total       | `r total.n` | `r total.p` | `r total.n + total.p` |

## Métricas de Avaliação

```{r}
acuracia <- accuracy(acidentes, truth = target, estimate = predito, event_level = 'second')$.estimate

sensibilidade <- sensitivity(acidentes, truth = target, estimate = predito, event_level = 'second')$.estimate

especificidade <- specificity(acidentes, truth = target, estimate = predito, event_level = 'second')$.estimate

precisao <- precision(acidentes, truth = target, estimate = predito, event_level = 'second')$.estimate

```

| Métrica                                             | Valor              |
|-----------------------------------------------------|--------------------|
| Acurácia (`r tn` + `r tp` )/(`r total.n + total.p`) | `r acuracia`       |
| Sensibilidade (`r tp` )/(`r fn + tp`)               | `r sensibilidade`  |
| Especificidade (`r tn` )/(`r tn + fp`)              | `r especificidade` |
| Precisão (`r tp` )/(`r fp + tp`)                    | `r precisao`       |

## Referências

**FÁVERO**, Luiz Paulo; **BELFIORE**, Patrícia. Manual de Análise de Dados. 1ª Ed. Rio de Janeiro: Elsevier, 2017.

**FIELD**, Andy. Descobrindo a Estatística Usando SPSS. 2ª Ed. POrto Alegre: Artmed, 2009.
